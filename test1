#grep for regular expressions - search for firewall dependencies like hostname or https
grep -Eo '(https?://)?([0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]+)?|([a-zA-Z0-9]+(\.[a-zA-Z0-9-]+)+)(:[0-9]+)?' flow.xml | sort | uniq
#
import xml.etree.ElementTree as ET

tree = ET.parse('flow.xml')
root = tree.getroot()

for elem in root.iter():
    if 'value' in elem.tag and ('http://' in elem.text or 'https://' in elem.text):
        print(elem.text)
#-------------
import xml.etree.ElementTree as ET
import re

# Define a compiled regex pattern to match http, https, JDBC connections, and aexp
pattern = re.compile(r'(https?://|jdbc:|aexp)')

tree = ET.parse('flow.xml')
root = tree.getroot()

for elem in root.iter():
    # Check if elem.text contains any of our patterns
    if elem.text and pattern.search(elem.text):
        print(elem.text)
#-------------------
import xml.etree.ElementTree as ET
import re

# Define a compiled regex pattern to more specifically match endpoint connections
# This example includes patterns for typical URLs, JDBC connections, and your specified domains
pattern = re.compile(r'(https?://|jdbc:[\w:]+//)[\w.-]+(\.gso\.aexp\.com|\.aexp\.com)')

# Initialize a set to store unique matches
unique_endpoints = set()

tree = ET.parse('flow.xml')
root = tree.getroot()

for elem in root.iter():
    # Check if elem.text contains any of our specific endpoint connection patterns
    if elem.text and pattern.search(elem.text):
        # Add the match to the set of unique endpoints
        unique_endpoints.add(elem.text.strip())

# Print each unique endpoint connection found
for endpoint in unique_endpoints:
    print(endpoint)
#---------------------THIS WORKED ______

import xml.etree.ElementTree as ET
import re

# Updated regex to specifically capture hostnames and optional ports from the URLs
pattern = re.compile(
    r'(?:jdbc:[a-zA-Z]+://|https?://)([^:/\s]+)(:\d+)?'
)

tree = ET.parse('flow.xml')
root = tree.getroot()

# Use a set for storing unique hostnames with ports (if available) to avoid duplicates
hostnames_with_ports = set()

for elem in root.iter():
    if elem.text:
        for match in pattern.finditer(elem.text):
            # Concatenate hostname and port (if port is captured)
            hostname_with_port = match.group(1) + (match.group(2) if match.group(2) else '')
            hostnames_with_ports.add(hostname_with_port)

# Print the unique, sorted list of hostnames with ports
for item in sorted(hostnames_with_ports):
    print(item)

#--------
import xml.etree.ElementTree as ET
import re

# Original pattern to capture hostnames and optional ports
pattern = re.compile(
    r'(?:jdbc:[a-zA-Z]+://|https?://)([^:/\s]+)(:\d+)?'
)

# Parse the original flow.xml
tree = ET.parse('flow.xml')
root = tree.getroot()

# Prepare a new XML structure for the output
output_root = ET.Element("endpoints")
for elem in root.iter():
    if elem.text:
        for match in pattern.finditer(elem.text):
            hostname = match.group(1)
            port = match.group(2) if match.group(2) else ""
            
            # Create a new element for each endpoint and populate it
            endpoint_elem = ET.SubElement(output_root, "endpoint")
            hostname_elem = ET.SubElement(endpoint_elem, "hostname")
            hostname_elem.text = hostname
            port_elem = ET.SubElement(endpoint_elem, "port")
            port_elem.text = port.lstrip(':')  # Remove leading colon from the port

# Convert the new tree to a string and save it to a file
tree = ET.ElementTree(output_root)
with open("endpoints.xml", "wb") as files:
    tree.write(files)

print("Output saved to endpoints.xml")

#----------------------------------------------
import xml.etree.ElementTree as ET
import re
import csv

# Compile the pattern to capture hostnames and optional ports
pattern = re.compile(
    r'(?:jdbc:[a-zA-Z]+://|https?://)([^:/\s]+)(:\d+)?'
)

# Parse the original flow.xml
tree = ET.parse('flow.xml')
root = tree.getroot()

# Open a CSV file to write the hostnames and ports
csv_filename = "endpoints.csv"
with open(csv_filename, 'w', newline='') as csv_file:
    writer = csv.writer(csv_file)
    # Write the header row
    writer.writerow(['Hostname', 'Port'])
    
    for elem in root.iter():
        if elem.text:
            for match in pattern.finditer(elem.text):
                hostname = match.group(1)
                port = match.group(2) if match.group(2) else ""
                # Write each hostname and port to the CSV, removing leading colon from the port
                writer.writerow([hostname, port.lstrip(':')])

print(f"Output saved to {csv_filename}")
###NODUPLICATEENTRIES---------------------------------------
import xml.etree.ElementTree as ET
import re
import csv

# Compile the pattern to capture hostnames and optional ports
pattern = re.compile(
    r'(?:jdbc:[a-zA-Z]+://|https?://)([^:/\s]+)(:\d+)?'
)

# Parse the original flow.xml
tree = ET.parse('flow.xml')
root = tree.getroot()

# Use a set to store unique hostnames and ports to avoid duplicates
unique_endpoints = set()

for elem in root.iter():
    if elem.text:
        for match in pattern.finditer(elem.text):
            hostname = match.group(1)
            port = match.group(2) if match.group(2) else ""
            # Add the unique hostname-port combination to the set
            unique_endpoints.add((hostname, port.lstrip(':')))  # Remove leading colon from the port

# Open a CSV file to write the unique hostnames and ports
csv_filename = "endpoints.csv"
with open(csv_filename, 'w', newline='') as csv_file:
    writer = csv.writer(csv_file)
    # Write the header row
    writer.writerow(['Hostname', 'Port'])
    
    # Write each unique hostname and port to the CSV
    for endpoint in unique_endpoints:
        writer.writerow(endpoint)

print(f"Output saved to {csv_filename}")



